{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n"
    },
    "contracts/vrf/VRFConsumerBaseUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"../interfaces/LinkTokenInterface.sol\";\r\n\r\nimport \"./VRFRequestIDBase.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBaseUpgradeable is\r\n\tInitializable,\r\n\tVRFRequestIDBase\r\n{\r\n\t/**\r\n\t * @notice fulfillRandomness handles the VRF response. Your contract must\r\n\t * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n\t * @notice principles to keep in mind when implementing your fulfillRandomness\r\n\t * @notice method.\r\n\t *\r\n\t * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n\t * @dev signature, and will call it once it has verified the proof\r\n\t * @dev associated with the randomness. (It is triggered via a call to\r\n\t * @dev rawFulfillRandomness, below.)\r\n\t *\r\n\t * @param requestId The Id initially returned by requestRandomness\r\n\t * @param randomness the VRF output\r\n\t */\r\n\tfunction fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n\t\tinternal\r\n\t\tvirtual;\r\n\r\n\t/**\r\n\t * @dev In order to keep backwards compatibility we have kept the user\r\n\t * seed field around. We remove the use of it because given that the blockhash\r\n\t * enters later, it overrides whatever randomness the used seed provides.\r\n\t * Given that it adds no security, and can easily lead to misunderstandings,\r\n\t * we have removed it from usage and can now provide a simpler API.\r\n\t */\r\n\tuint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n\t/**\r\n\t * @notice requestRandomness initiates a request for VRF output given _seed\r\n\t *\r\n\t * @dev The fulfillRandomness method receives the output, once it's provided\r\n\t * @dev by the Oracle, and verified by the vrfCoordinator.\r\n\t *\r\n\t * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n\t * @dev the _fee must exceed the fee specified during registration of the\r\n\t * @dev _keyHash.\r\n\t *\r\n\t * @dev The _seed parameter is vestigial, and is kept only for API\r\n\t * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n\t * @dev your own randomness, here, but it's not necessary because the VRF\r\n\t * @dev oracle will mix the hash of the block containing your request into the\r\n\t * @dev VRF seed it ultimately uses.\r\n\t *\r\n\t * @param _keyHash ID of public key against which randomness is generated\r\n\t * @param _fee The amount of LINK to send with the request\r\n\t *\r\n\t * @return requestId unique ID for this request\r\n\t *\r\n\t * @dev The returned requestId can be used to distinguish responses to\r\n\t * @dev concurrent requests. It is passed as the first argument to\r\n\t * @dev fulfillRandomness.\r\n\t */\r\n\tfunction requestRandomness(bytes32 _keyHash, uint256 _fee)\r\n\t\tinternal\r\n\t\treturns (bytes32 requestId)\r\n\t{\r\n\t\tLINK.transferAndCall(\r\n\t\t\tvrfCoordinator,\r\n\t\t\t_fee,\r\n\t\t\tabi.encode(_keyHash, USER_SEED_PLACEHOLDER)\r\n\t\t);\r\n\t\t// This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n\t\t// the hash of the block containing this request to obtain the seed/input\r\n\t\t// which is finally passed to the VRF cryptographic machinery.\r\n\t\tuint256 vRFSeed = makeVRFInputSeed(\r\n\t\t\t_keyHash,\r\n\t\t\tUSER_SEED_PLACEHOLDER,\r\n\t\t\taddress(this),\r\n\t\t\tnonces[_keyHash]\r\n\t\t);\r\n\t\t// nonces[_keyHash] must stay in sync with\r\n\t\t// VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n\t\t// successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n\t\t// This provides protection against the user repeating their input seed,\r\n\t\t// which would result in a predictable/duplicate output, if multiple such\r\n\t\t// requests appeared in the same block.\r\n\t\tnonces[_keyHash] = nonces[_keyHash] + 1;\r\n\t\treturn makeRequestId(_keyHash, vRFSeed);\r\n\t}\r\n\r\n\tLinkTokenInterface /*immutable*/\r\n\t\tinternal LINK;\r\n\taddress /*immutable*/\r\n\t\tprivate vrfCoordinator;\r\n\r\n\t// Nonces for each VRF key from which randomness has been requested.\r\n\t//\r\n\t// Must stay in sync with VRFCoordinator[_keyHash][this]\r\n\tmapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n\t\tprivate nonces;\r\n\r\n\t/**\r\n\t * @param _vrfCoordinator address of VRFCoordinator contract\r\n\t * @param _link address of LINK token contract\r\n\t *\r\n\t * @dev https://docs.chain.link/docs/link-token-contracts\r\n\t */\r\n\t// constructor(\r\n\t//   address _vrfCoordinator,\r\n\t//   address _link\r\n\t// ) {\r\n\tfunction __vrfConsumerBase_init(address _vrfCoordinator, address _link)\r\n\t\tinternal\r\n\t\tinitializer\r\n\t{\r\n\t\tvrfCoordinator = _vrfCoordinator;\r\n\t\tLINK = LinkTokenInterface(_link);\r\n\t}\r\n\r\n\t// rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n\t// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n\t// the origin of the call\r\n\tfunction rawFulfillRandomness(bytes32 requestId, uint256 randomness)\r\n\t\texternal\r\n\t{\r\n\t\trequire(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n\t\tfulfillRandomness(requestId, randomness);\r\n\t}\r\n}\r\n"
    },
    "contracts/vrf/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/utility/WhitelistUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @dev The contract manages a list of whitelisted addresses\r\n */\r\ncontract WhitelistUpgradeable is OwnableUpgradeable {\r\n  using AddressUpgradeable for address;\r\n\r\n  mapping(address => bool) private whitelist;\r\n\r\n  function __Whitelist_init() internal initializer {\r\n    OwnableUpgradeable.__Ownable_init();\r\n    address msgSender = _msgSender();\r\n    whitelist[msgSender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev returns true if a given address is whitelisted, false if not\r\n   *\r\n   * @param _address address to check\r\n   *\r\n   * @return true if the address is whitelisted, false if not\r\n   */\r\n  function isWhitelisted(address _address) public view returns (bool) {\r\n    return whitelist[_address];\r\n  }\r\n\r\n  modifier onlyWhitelisted() {\r\n    address sender = _msgSender();\r\n    require(isWhitelisted(sender), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev adds a given address to the whitelist\r\n   *\r\n   * @param _address address to add\r\n   */\r\n  function addAddress(address _address) public onlyWhitelisted {\r\n    if (whitelist[_address])\r\n      // checks if the address is already whitelisted\r\n      return;\r\n\r\n    whitelist[_address] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev removes a given address from the whitelist\r\n   *\r\n   * @param _address address to remove\r\n   */\r\n  function removeAddress(address _address) public onlyWhitelisted {\r\n    if (!whitelist[_address])\r\n      // checks if the address is actually whitelisted\r\n      return;\r\n\r\n    whitelist[_address] = false;\r\n  }\r\n}\r\n"
    },
    "contracts/NFTLuckBoxUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"./vrf/VRFConsumerBaseUpgradeable.sol\";\r\nimport \"./utility/WhitelistUpgradeable.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/**\r\n * @title Luckbox v.2\r\n * @dev A contract aims to help distribute NFTs for collectors to users who met the conditions\r\n */\r\n\r\ncontract LuckBoxUpgradeable is\r\n\tInitializable,\r\n\tWhitelistUpgradeable,\r\n\tReentrancyGuardUpgradeable,\r\n\tIERC721ReceiverUpgradeable,\r\n\tERC165Upgradeable,\r\n\tERC721HolderUpgradeable,\r\n\tERC1155HolderUpgradeable,\r\n\tVRFConsumerBaseUpgradeable\r\n{\r\n\tusing SafeMathUpgradeable for uint256;\r\n\tusing AddressUpgradeable for address;\r\n\r\n\t// POAP info\r\n\tstruct Poap {\r\n\t\taddress assetAddress;\r\n\t\tuint256 tokenId;\r\n\t\tbool is1155;\r\n\t}\r\n\r\n\t// Event Info\r\n\tstruct Event {\r\n\t\tstring name;\r\n\t\tuint256[] poaps;\r\n\t\tbytes32 merkleRoot; // to claim\r\n\t\tmapping(address => bool) claimed;\r\n\t\tuint256 claimCount;\r\n\t\tuint256 seed;\r\n\t\tbool ended;\r\n\t\tbool active;\r\n\t}\r\n\r\n\t// Project Info\r\n\tstruct Project {\r\n\t\tstring name;\r\n\t\tbytes32 merkleRoot;\r\n\t\tuint256 timestamp;\r\n\t\tbool active;\r\n\t}\r\n\r\n\t// Chainlink VRF contract\r\n\r\n\taddress public LINK_TOKEN;\r\n\tbytes32 public KEY_HASH;\r\n\tuint256 public FEE;\r\n\r\n\t// Nonce to be generated by Chainlink VRF\r\n\tmapping(bytes32 => address) private requestIdToAddress;\r\n\tmapping(bytes32 => uint256) private requestIdToEventId;\r\n\r\n\t// Poap Id => Poap\r\n\tmapping(uint256 => Poap) public poaps;\r\n\t// Event Id => Event\r\n\tmapping(uint256 => Event) public events;\r\n\t// Project Id => Project\r\n\tmapping(uint256 => Project) public projects;\r\n\r\n\tevent EventCreated(uint256 indexed eventId, string name, uint256[] poaps);\r\n\r\n\tevent PoapCreated(\r\n\t\tuint256 indexed poapId,\r\n\t\taddress assetAddress,\r\n\t\tuint256 tokenId,\r\n\t\tbool is1155\r\n\t);\r\n\r\n\tevent Deposited(\r\n\t\taddress from,\r\n\t\taddress assetAddress,\r\n\t\tuint256 tokenId,\r\n\t\tuint256 amount,\r\n\t\tbool is1155\r\n\t);\r\n\r\n\tevent Claimed(\r\n\t\taddress to,\r\n\t\tuint256 eventId,\r\n\t\taddress assetAddress,\r\n\t\tuint256 tokenId,\r\n\t\tbool is1155\r\n\t);\r\n\r\n\tevent ProjectCreated(uint256 indexed projectId, string name);\r\n\r\n\tevent FinalizeEvent(\r\n\t\taddress indexed finalizer,\r\n\t\tbytes32 requestId,\r\n\t\tuint256 time\r\n\t);\r\n\r\n\tevent SetEndEvent(uint256 indexed projectId, bool isEnd);\r\n\r\n\tfunction initialize(\r\n\t\taddress _linkToken,\r\n\t\taddress _vrfCoordinator,\r\n\t\tbytes32 _keyHash,\r\n\t\tuint256 _fee\r\n\t) public initializer {\r\n\t\tLINK_TOKEN = _linkToken;\r\n\t\tKEY_HASH = _keyHash;\r\n\t\tFEE = _fee;\r\n\t\tERC721HolderUpgradeable.__ERC721Holder_init();\r\n\t\t// IERC721ReceiverUpgradeable\r\n\t\tERC165Upgradeable.__ERC165_init();\r\n\t\t// IERC1155Upgradeable\r\n\t\tERC1155HolderUpgradeable.__ERC1155Holder_init();\r\n\t\t// SafeMathUpgradeable\r\n\t\tReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n\t\t// AddressUpgradeable\r\n\t\t// MerkleProofUpgradeable\r\n\t\tWhitelistUpgradeable.__Whitelist_init();\r\n\t\t_registerInterface(IERC721ReceiverUpgradeable.onERC721Received.selector);\r\n\t\tVRFConsumerBaseUpgradeable.__vrfConsumerBase_init(\r\n\t\t\t_vrfCoordinator,\r\n\t\t\t_linkToken\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice check whether the given address has held NFTs or not\r\n\t/// @param _projectId the project ID\r\n\t/// @param _address the wallet address that want to check\r\n\t/// @param _proof the proof generated off-chain\r\n\t/// @return output the result\r\n\tfunction eligible(\r\n\t\tuint256 _projectId,\r\n\t\taddress _address,\r\n\t\tbytes32[] memory _proof\r\n\t) external view returns (bool output) {\r\n\t\toutput = _eligible(_projectId, _address, _proof);\r\n\t}\r\n\r\n\t/// @notice check whether the caller can claim a POAP NFT or not\r\n\t/// @param _eventId the event that the caller wants to claim the prize\r\n\t/// @param _poapId ID of the POAP NFT recorded on this contract\r\n\t/// @param _proof the proof generated off-chain\r\n\t/// @return output the result\r\n\tfunction checkClaim(\r\n\t\tuint256 _eventId,\r\n\t\tuint256 _poapId,\r\n\t\tbytes32[] memory _proof\r\n\t) external view returns (bool output) {\r\n\t\toutput = _checkClaim(_eventId, _poapId, _proof);\r\n\t}\r\n\r\n\t/// @notice claim the NFT if the caller is eligible for\r\n\t/// @param _eventId the event that the caller wants to claim the prize\r\n\t/// @param _poapId ID of the POAP NFT recorded on this contract\r\n\t/// @param _proof the proof generated off-chain\r\n\tfunction claim(\r\n\t\tuint256 _eventId,\r\n\t\tuint256 _poapId,\r\n\t\tbytes32[] memory _proof\r\n\t) external nonReentrant {\r\n\t\trequire(events[_eventId].active == true, \"Given Event ID is invalid\");\r\n\t\trequire(events[_eventId].ended == false, \"The event is ended\");\r\n\t\trequire(\r\n\t\t\tevents[_eventId].claimed[msg.sender] == false,\r\n\t\t\t\"The caller is already claimed\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t_checkClaim(_eventId, _poapId, _proof) == true,\r\n\t\t\t\"The caller is not eligible to claim the given poap\"\r\n\t\t);\r\n\r\n\t\tif (poaps[_poapId].is1155) {\r\n\t\t\tIERC1155Upgradeable(poaps[_poapId].assetAddress).safeTransferFrom(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\tpoaps[_poapId].tokenId,\r\n\t\t\t\t1,\r\n\t\t\t\t\"0x00\"\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tIERC721Upgradeable(poaps[_poapId].assetAddress).safeTransferFrom(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\tpoaps[_poapId].tokenId\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tevents[_eventId].claimed[msg.sender] = true;\r\n\t\tevents[_eventId].claimCount += 1;\r\n\r\n\t\temit Claimed(\r\n\t\t\tmsg.sender,\r\n\t\t\t_eventId,\r\n\t\t\tpoaps[_poapId].assetAddress,\r\n\t\t\tpoaps[_poapId].tokenId,\r\n\t\t\tpoaps[_poapId].is1155\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice deposit ERC-1155 NFT prior to the claim, ideally should be called by the event's owner\r\n\t/// @param _assetAddress the NFT asset address\r\n\t/// @param _tokenId the token ID on the NFT\r\n\t/// @param _amount the amount of NFT to be deposited\r\n\tfunction depositERC1155(\r\n\t\taddress _assetAddress,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount\r\n\t) external nonReentrant {\r\n\t\tIERC1155Upgradeable(_assetAddress).safeTransferFrom(\r\n\t\t\tmsg.sender,\r\n\t\t\taddress(this),\r\n\t\t\t_tokenId,\r\n\t\t\t_amount,\r\n\t\t\t\"0x00\"\r\n\t\t);\r\n\r\n\t\temit Deposited(msg.sender, _assetAddress, _tokenId, _amount, true);\r\n\t}\r\n\r\n\t/// @notice deposit ERC-721 NFT prior to the claim, ideally should be called by the event's owner\r\n\t/// @param _assetAddress the NFT asset address\r\n\t/// @param _tokenId the token ID on the NFT\r\n\tfunction depositERC721(address _assetAddress, uint256 _tokenId)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t{\r\n\t\tIERC721Upgradeable(_assetAddress).safeTransferFrom(\r\n\t\t\tmsg.sender,\r\n\t\t\taddress(this),\r\n\t\t\t_tokenId\r\n\t\t);\r\n\r\n\t\temit Deposited(msg.sender, _assetAddress, _tokenId, 1, false);\r\n\t}\r\n\r\n\t/// @notice create a record for POAP NFT which will be used during a claim period for mapping POAP ID <-> ASSET ADDRESS\r\n\t/// @param _poapId ID for the POAP\r\n\t/// @param _assetAddress the NFT asset address\r\n\t/// @param _tokenId the token ID on the NFT\r\n\t/// @param _is1155 ERC-1155 flags\r\n\tfunction createPoap(\r\n\t\tuint256 _poapId,\r\n\t\taddress _assetAddress,\r\n\t\tuint256 _tokenId,\r\n\t\tbool _is1155\r\n\t) external nonReentrant onlyWhitelisted {\r\n\t\trequire(poaps[_poapId].assetAddress == address(0), \"Given ID is occupied\");\r\n\r\n\t\tpoaps[_poapId].assetAddress = _assetAddress;\r\n\t\tpoaps[_poapId].tokenId = _tokenId;\r\n\t\tpoaps[_poapId].is1155 = _is1155;\r\n\r\n\t\temit PoapCreated(_poapId, _assetAddress, _tokenId, _is1155);\r\n\t}\r\n\r\n\tfunction createPoapBatch(\r\n\t\tuint256[] memory _poapId,\r\n\t\taddress[] memory _assetAddress,\r\n\t\tuint256[] memory _tokenId,\r\n\t\tbool[] memory _is1155\r\n\t) public nonReentrant onlyWhitelisted {\r\n\t\trequire(\r\n\t\t\t_poapId.length == _assetAddress.length,\r\n\t\t\t\"Array size is not the same length\"\r\n\t\t);\r\n\r\n\t\tfor (uint256 i = 0; i < _poapId.length; i++) {\r\n\t\t\tpoaps[_poapId[i]].assetAddress = _assetAddress[i];\r\n\t\t\tpoaps[_poapId[i]].tokenId = _tokenId[i];\r\n\t\t\tpoaps[_poapId[i]].is1155 = _is1155[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice create a campaign\r\n\t/// @param _eventId ID for the event\r\n\t/// @param _name name of the event\r\n\t/// @param _poaps NFT that will be distributed\r\n\tfunction createEvent(\r\n\t\tuint256 _eventId,\r\n\t\tstring memory _name,\r\n\t\tuint256[] memory _poaps\r\n\t) external nonReentrant onlyWhitelisted {\r\n\t\trequire(events[_eventId].active == false, \"Given ID is occupied\");\r\n\r\n\t\tevents[_eventId].active = true;\r\n\t\tevents[_eventId].name = _name;\r\n\t\tevents[_eventId].poaps = _poaps;\r\n\r\n\t\temit EventCreated(_eventId, _name, _poaps);\r\n\t}\r\n\r\n\t/// @notice create a project, once set it allows users to verify that they  having the project's NFTs in the wallet\r\n\t/// @param _projectId ID for the project\r\n\t/// @param _name name of the project\r\n\tfunction createProject(uint256 _projectId, string memory _name)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\trequire(projects[_projectId].active == false, \"Given ID is occupied\");\r\n\r\n\t\tprojects[_projectId].active = true;\r\n\t\tprojects[_projectId].name = _name;\r\n\r\n\t\temit ProjectCreated(_projectId, _name);\r\n\t}\r\n\r\n\t/// @notice upload the root of the proof identifies who will be able to claim the prizes\r\n\t/// @param _eventId ID for the event\r\n\t/// @param _merkleRoot the root of the proof to be uploaded\r\n\tfunction attachClaim(uint256 _eventId, bytes32 _merkleRoot)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\trequire(events[_eventId].active == true, \"Given ID is invalid\");\r\n\r\n\t\tevents[_eventId].merkleRoot = _merkleRoot;\r\n\t}\r\n\r\n\t/// @notice upload the root of the proof identifies who is holding the project's NFTs\r\n\t/// @param _projectId ID for the project\r\n\t/// @param _merkleRoot the root of the proof to be uploaded\r\n\tfunction attachWhitelist(uint256 _projectId, bytes32 _merkleRoot)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\trequire(projects[_projectId].active == true, \"Given ID is invalid\");\r\n\r\n\t\tprojects[_projectId].merkleRoot = _merkleRoot;\r\n\t\tprojects[_projectId].timestamp = now;\r\n\t}\r\n\r\n\t/// @notice upload the root of the proof identifies who is holding the project's NFTs (in batch)\r\n\t/// @param _projectIds array of ID for the project\r\n\t/// @param _merkleRoots array of the root of the proof to be uploaded\r\n\tfunction attachWhitelistBatch(\r\n\t\tuint256[] memory _projectIds,\r\n\t\tbytes32[] memory _merkleRoots\r\n\t) external nonReentrant onlyWhitelisted {\r\n\t\trequire(\r\n\t\t\t_projectIds.length == _merkleRoots.length,\r\n\t\t\t\"Array size is not the same length\"\r\n\t\t);\r\n\r\n\t\tfor (uint256 i = 0; i < _projectIds.length; i++) {\r\n\t\t\tprojects[_projectIds[i]].merkleRoot = _merkleRoots[i];\r\n\t\t\tprojects[_projectIds[i]].timestamp = now;\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice replace POAP NFTs to be distributed on the event\r\n\t/// @param _eventId ID of the event\r\n\t/// @param _poaps array of the POAP ID\r\n\tfunction updatePoaps(uint256 _eventId, uint256[] memory _poaps)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\trequire(events[_eventId].active == true, \"Given ID is invalid\");\r\n\r\n\t\tevents[_eventId].poaps = _poaps;\r\n\t}\r\n\r\n\t/// @notice withdraw ERC-1155 NFTs locked in the contract\r\n\tfunction emergencyWithdrawERC1155(\r\n\t\taddress _to,\r\n\t\taddress _tokenAddress,\r\n\t\tuint256 _tokenId,\r\n\t\tuint256 _amount\r\n\t) external nonReentrant onlyWhitelisted {\r\n\t\tIERC1155Upgradeable(_tokenAddress).safeTransferFrom(\r\n\t\t\taddress(this),\r\n\t\t\t_to,\r\n\t\t\t_tokenId,\r\n\t\t\t_amount,\r\n\t\t\t\"0x00\"\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice withdraw ERC-721 NFTs locked in the contract\r\n\tfunction emergencyWithdrawERC721(\r\n\t\taddress _to,\r\n\t\taddress _tokenAddress,\r\n\t\tuint256 _tokenId\r\n\t) external nonReentrant onlyWhitelisted {\r\n\t\tIERC721Upgradeable(_tokenAddress).safeTransferFrom(\r\n\t\t\taddress(this),\r\n\t\t\t_to,\r\n\t\t\t_tokenId\r\n\t\t);\r\n\t}\r\n\r\n\t// @notice withdraw ERC-20 locked in the contract\r\n\tfunction emergencyWithdrawERC20(address _tokenAddress, uint256 _amount)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\tIERC20Upgradeable(_tokenAddress).transfer(msg.sender, _amount);\r\n\t}\r\n\r\n\t/// @notice finalize event for get seed\r\n\t/// @param _eventId ID of the event\r\n\tfunction finalizeEvent(uint256 _eventId)\r\n\t\texternal\r\n\t\tnonReentrant\r\n\t\tonlyWhitelisted\r\n\t{\r\n\t\trequire(events[_eventId].active == true, \"Given ID is invalid\");\r\n\t\trequire(events[_eventId].seed == 0, \"Seed number is already generated\");\r\n\t\trequire(\r\n\t\t\tIERC20Upgradeable(LINK_TOKEN).balanceOf(address(this)) >= FEE,\r\n\t\t\t\"Insufficient LINK to proceed VRF\"\r\n\t\t);\r\n\r\n\t\tbytes32 requestId = requestRandomness(KEY_HASH, FEE);\r\n\t\trequestIdToAddress[requestId] = msg.sender;\r\n\t\trequestIdToEventId[requestId] = _eventId;\r\n\r\n\t\temit FinalizeEvent(msg.sender, requestId, now);\r\n\t}\r\n\r\n\t/// @notice set end flag to event\r\n\tfunction setEndEvent(uint256 _eventId, bool _isEnd) external onlyWhitelisted {\r\n\t\tevents[_eventId].ended = _isEnd;\r\n\r\n\t\temit SetEndEvent(_eventId, _isEnd);\r\n\t}\r\n\r\n\t// PRIVATE FUNCTIONS\r\n\r\n\tfunction _checkClaim(\r\n\t\tuint256 _eventId,\r\n\t\tuint256 _poapId,\r\n\t\tbytes32[] memory _proof\r\n\t) internal view returns (bool) {\r\n\t\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender, _poapId));\r\n\t\treturn\r\n\t\t\tMerkleProofUpgradeable.verify(_proof, events[_eventId].merkleRoot, leaf);\r\n\t}\r\n\r\n\tfunction _eligible(\r\n\t\tuint256 _projectId,\r\n\t\taddress _address,\r\n\t\tbytes32[] memory _proof\r\n\t) internal view returns (bool) {\r\n\t\trequire(projects[_projectId].active == true, \"Given ID is invalid\");\r\n\r\n\t\tbytes32 leaf = keccak256(abi.encodePacked(_address));\r\n\r\n\t\treturn\r\n\t\t\tMerkleProofUpgradeable.verify(\r\n\t\t\t\t_proof,\r\n\t\t\t\tprojects[_projectId].merkleRoot,\r\n\t\t\t\tleaf\r\n\t\t\t);\r\n\t}\r\n\r\n\t// callback from Chainlink VRF\r\n\tfunction fulfillRandomness(bytes32 requestId, uint256 _randomness)\r\n\t\tinternal\r\n\t\toverride\r\n\t{\r\n\t\tuint256 eventId = requestIdToEventId[requestId];\r\n\r\n\t\tif (eventId != 0) {\r\n\t\t\tevents[eventId].seed = _randomness;\r\n\t\t}\r\n\t}\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n  /**\n   * @dev Implementation of the {IERC721Receiver} interface.\n   *\n   * Accepts all token transfers. \n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n   */\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n    function __ERC721Holder_init() internal initializer {\n        __ERC721Holder_init_unchained();\n    }\n\n    function __ERC721Holder_init_unchained() internal initializer {\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal initializer {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n        __ERC1155Holder_init_unchained();\n    }\n\n    function __ERC1155Holder_init_unchained() internal initializer {\n    }\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProofUpgradeable {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"../../introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal initializer {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n    }\n\n    function __ERC1155Receiver_init_unchained() internal initializer {\n        _registerInterface(\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\n            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../introspection/IERC165Upgradeable.sol\";\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}